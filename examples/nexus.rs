// Example modified from a "Claude Sonnet 4" generated code.

use dendros::parse_nexus_advanced;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("===================\n");

    // Example 1: Simple NEXUS file with trees only
    let simple_nexus = r#"
    #NEXUS
    begin trees;
        tree tree1 = (A,B,C);
        tree tree2 = ((A,B),C);
    end;
    "#;

    println!("1. Parsing simple NEXUS file:");
    let nexus_file = parse_nexus_advanced(simple_nexus)?;
    println!("   Trees found: {}", nexus_file.count_of_trees());
    for tree_name in nexus_file.tree_names() {
        println!("   - {}", tree_name);
    }

    // Example 2: NEXUS file with taxa and trees
    let nexus_with_taxa = r#"
    #NEXUS
    begin taxa;
        dimensions ntax=4;
        taxlabels
            'Homo sapiens'
            'Pan troglodytes'
            'Gorilla gorilla'
            'Pongo pygmaeus'
        ;
    end;

    begin trees;
        tree primates = [&R] (('Homo sapiens':0.0067,'Pan troglodytes':0.0068)0.99:0.0025,
                              ('Gorilla gorilla':0.0092,'Pongo pygmaeus':0.0154)0.95:0.0033);
    end;
    "#;

    println!("\n2. Parsing NEXUS file with taxa:");
    let nexus_file = parse_nexus_advanced(nexus_with_taxa)?;
    println!("   Taxa found: {}", nexus_file.count_of_taxa());
    for taxon in &nexus_file.taxa {
        if taxon.attributes.is_empty() {
            println!("   - {}", taxon.name);
        } else {
            println!(
                "   - {} (with {} attributes)",
                taxon.name,
                taxon.attributes.len()
            );
        }
    }
    println!("   Trees found: {}", nexus_file.count_of_trees());

    // Example 3: Working with the parsed tree
    if let Some(tree) = nexus_file.tree("primates") {
        println!("\n3. Tree analysis for 'primates':");
        println!("   Total nodes: {}", tree.node_count_all());
        println!("   Tips: {}", tree.tip_count_all());
        println!("   Is rooted: {}", tree.is_rooted());
        println!("   Has branch lengths: {}", tree.has_branch_lengths());
    }

    // Example 4: Complex NEXUS file with comments and annotations
    let complex_nexus = r#"
    #NEXUS
    [Generated by phylogenetic analysis]

    begin taxa;
        dimensions ntax=3;
        taxlabels
            Species_A [first species]
            Species_B [second species]
            Species_C [outgroup]
        ;
    end;

    begin trees;
        [Maximum likelihood tree]
        tree ML = [&R] ((Species_A:0.1,Species_B:0.2)0.95:0.05,Species_C:0.3);

        [Consensus tree]
        tree consensus = [&R] ((Species_A,Species_B),Species_C);
    end;

    begin figtree;
        set appearance.backgroundColorAttribute="Default";
        set nodeBars.isShown=false;
    end;
    "#;

    println!("\n4. Parsing complex NEXUS file with comments:");
    let nexus_file = parse_nexus_advanced(complex_nexus)?;
    println!("   Taxa: {}", nexus_file.count_of_taxa());
    println!("   Trees: {}", nexus_file.count_of_trees());

    println!("\n   Tree details:");
    for tree_name in nexus_file.tree_names() {
        if let Some(tree) = nexus_file.tree(tree_name) {
            println!(
                "   - {}: {} nodes, {} tips",
                tree_name,
                tree.node_count_all(),
                tree.tip_count_all()
            );
        }
    }

    println!("\nâœ“ All examples completed successfully!");
    Ok(())
}
